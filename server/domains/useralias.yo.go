// Package domains contains the types.
package domains

// GENERATED BY YO. DO NOT EDIT.

import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
)

// UserAlias represents a row from 'UserAliases'.
type UserAlias struct {
	UserID     string `spanner:"UserId" json:"UserId"`         // UserId
	Provider   string `spanner:"Provider" json:"Provider"`     // Provider
	Identifier string `spanner:"Identifier" json:"Identifier"` // Identifier
}

func UserAliasPrimaryKeys() []string {
	return []string{
		"UserId",
		"Provider",
		"Identifier",
	}
}

func UserAliasColumns() []string {
	return []string{
		"UserId",
		"Provider",
		"Identifier",
	}
}

func (ua *UserAlias) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "UserId":
			ret = append(ret, &ua.UserID)
		case "Provider":
			ret = append(ret, &ua.Provider)
		case "Identifier":
			ret = append(ret, &ua.Identifier)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (ua *UserAlias) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "UserId":
			ret = append(ret, ua.UserID)
		case "Provider":
			ret = append(ret, ua.Provider)
		case "Identifier":
			ret = append(ret, ua.Identifier)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newUserAlias_Decoder returns a decoder which reads a row from *spanner.Row
// into UserAlias. The decoder is not goroutine-safe. Don't use it concurrently.
func newUserAlias_Decoder(cols []string) func(*spanner.Row) (*UserAlias, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*UserAlias, error) {
		var ua UserAlias
		ptrs, err := ua.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &ua, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (ua *UserAlias) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("UserAliases", UserAliasColumns(), []interface{}{
		ua.UserID, ua.Provider, ua.Identifier,
	})
}

// Delete deletes the UserAlias from the database.
func (ua *UserAlias) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := ua.columnsToValues(UserAliasPrimaryKeys())
	return spanner.Delete("UserAliases", spanner.Key(values))
}
