// Package domains contains the types.
package domains

// GENERATED BY YO. DO NOT EDIT.

import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
)

// User represents a row from 'Users'.
type User struct {
	UserID string `spanner:"UserId" json:"UserId"` // UserId
}

func UserPrimaryKeys() []string {
	return []string{
		"UserId",
	}
}

func UserColumns() []string {
	return []string{
		"UserId",
	}
}

func (u *User) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "UserId":
			ret = append(ret, &u.UserID)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (u *User) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "UserId":
			ret = append(ret, u.UserID)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newUser_Decoder returns a decoder which reads a row from *spanner.Row
// into User. The decoder is not goroutine-safe. Don't use it concurrently.
func newUser_Decoder(cols []string) func(*spanner.Row) (*User, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*User, error) {
		var u User
		ptrs, err := u.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &u, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (u *User) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("Users", UserColumns(), []interface{}{
		u.UserID,
	})
}

// Delete deletes the User from the database.
func (u *User) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := u.columnsToValues(UserPrimaryKeys())
	return spanner.Delete("Users", spanner.Key(values))
}
